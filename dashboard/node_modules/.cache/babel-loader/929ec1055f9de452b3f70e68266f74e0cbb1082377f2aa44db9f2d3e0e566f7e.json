{"ast":null,"code":"/**\r\n * API Utilities for Secure Esports Equipment Performance Tracker\r\n * Provides functions for authenticated API requests and error handling\r\n */\n\n// Base URL for API requests\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n/**\r\n * Refresh the authentication token\r\n * @returns {Promise<boolean>} Success status\r\n */\nexport const refreshToken = async () => {\n  try {\n    const currentToken = localStorage.getItem('authToken');\n    if (!currentToken) {\n      return false;\n    }\n\n    // Use the current token to request a new one\n    const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${currentToken}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('authToken', data.token);\n      console.log('Token refreshed successfully');\n      return true;\n    }\n    console.warn('Token refresh failed, status:', response.status);\n    return false;\n  } catch (error) {\n    console.error('Token refresh failed:', error);\n    return false;\n  }\n};\n\n/**\r\n * Make an authenticated fetch request to the API\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise} - Fetch promise\r\n */\nexport const fetchWithAuth = async (endpoint, options = {}, retryCount = 0) => {\n  // Get auth token from localStorage\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  // Set up headers with authentication\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`,\n    ...options.headers\n  };\n\n  // Make request with authentication\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers\n    });\n\n    // Handle token expiration\n    if (response.status === 401) {\n      console.log('Token expired, attempting to refresh...');\n\n      // Only try to refresh once to prevent infinite loops\n      if (retryCount === 0) {\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          console.log('Token refreshed, retrying request');\n          // Retry the request with the new token\n          return fetchWithAuth(endpoint, options, retryCount + 1);\n        }\n      }\n\n      // Clear invalid token and redirect to login\n      localStorage.removeItem('authToken');\n      window.location.href = '/login?session=expired';\n      throw new Error('Authentication token expired');\n    }\n\n    // Handle other error status codes\n    if (!response.ok) {\n      let errorMessage;\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || `Request failed with status ${response.status}`;\n      } catch (e) {\n        errorMessage = `Request failed with status ${response.status}`;\n      }\n      throw new Error(errorMessage);\n    }\n    return response;\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Login user and get authentication token\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Object} - User data and token\r\n */\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error('Invalid username or password');\n      }\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Verify the current authentication token\r\n * @returns {Object} - User data if token is valid\r\n */\nexport const verifyToken = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      throw new Error('No authentication token');\n    }\n    const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      localStorage.removeItem('authToken');\n      throw new Error('Invalid token');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Token verification error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Logout user and clear authentication\r\n */\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  window.location.href = '/login';\n};\n\n/**\r\n * Register a new device\r\n * @param {string} deviceName - Name of the device\r\n * @param {string} deviceType - Type of device (keyboard, mouse, system)\r\n * @returns {Object} - Device data including client_id and client_secret\r\n */\nexport const registerDevice = async (deviceName, deviceType) => {\n  try {\n    const response = await fetchWithAuth('/api/devices/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        name: deviceName,\n        device_type: deviceType\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Device registration error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get all registered devices\r\n * @returns {Array} - List of devices\r\n */\nexport const getDevices = async () => {\n  try {\n    const response = await fetchWithAuth('/api/devices');\n    const data = await response.json();\n    return data.devices || [];\n  } catch (error) {\n    console.error('Error fetching devices:', error);\n    // Return empty array as fallback\n    return [];\n  }\n};\n\n/**\r\n * Update device status\r\n * @param {string} deviceId - Device ID\r\n * @param {string} status - New status ('active' or 'disabled')\r\n * @returns {Object} - Updated device data\r\n */\nexport const updateDeviceStatus = async (deviceId, status) => {\n  try {\n    const response = await fetchWithAuth(`/api/devices/${deviceId}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        status\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating device status:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get performance data for a specific time range\r\n * @param {string} timeRange - 'day', 'week', 'month'\r\n * @returns {Array} - Performance data\r\n */\nexport const getPerformanceData = async (timeRange = 'day') => {\n  try {\n    const response = await fetchWithAuth(`/api/analytics/performance?timeRange=${timeRange}`);\n    const data = await response.json();\n    return data.data || [];\n  } catch (error) {\n    console.error('Performance data error:', error);\n    // Return fallback data\n    return [{\n      timestamp: new Date(Date.now() - 50 * 60000).toISOString(),\n      actions_per_minute: 120,\n      key_press_count: 100,\n      mouse_click_count: 50\n    }, {\n      timestamp: new Date(Date.now() - 40 * 60000).toISOString(),\n      actions_per_minute: 135,\n      key_press_count: 110,\n      mouse_click_count: 60\n    }, {\n      timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n      actions_per_minute: 142,\n      key_press_count: 115,\n      mouse_click_count: 65\n    }, {\n      timestamp: new Date(Date.now() - 20 * 60000).toISOString(),\n      actions_per_minute: 128,\n      key_press_count: 105,\n      mouse_click_count: 55\n    }, {\n      timestamp: new Date(Date.now() - 10 * 60000).toISOString(),\n      actions_per_minute: 138,\n      key_press_count: 112,\n      mouse_click_count: 58\n    }];\n  }\n};\n\n/**\r\n * Get recent sessions with optional filtering\r\n * @param {number} limit - Number of sessions to return\r\n * @param {string} filter - Filter by timeframe ('all', 'week', 'month')\r\n * @returns {Array} - Recent sessions\r\n */\nexport const getRecentSessions = async (limit = 5, filter = 'all') => {\n  try {\n    const response = await fetchWithAuth(`/api/sessions/recent?limit=${limit}&filter=${filter}`);\n    const data = await response.json();\n    return data.sessions || [];\n  } catch (error) {\n    console.error('Recent sessions error:', error);\n    // Return fallback data\n    return [{\n      id: '1',\n      start_time: new Date(Date.now() - 24 * 60 * 60000).toISOString(),\n      duration_minutes: 120,\n      average_apm: 130,\n      device_name: 'Gaming PC'\n    }, {\n      id: '2',\n      start_time: new Date(Date.now() - 12 * 60 * 60000).toISOString(),\n      duration_minutes: 90,\n      average_apm: 145,\n      device_name: 'Gaming PC'\n    }, {\n      id: '3',\n      start_time: new Date(Date.now() - 4 * 60 * 60000).toISOString(),\n      duration_minutes: 60,\n      average_apm: 138,\n      device_name: 'Gaming PC'\n    }];\n  }\n};\n\n/**\r\n * Get security audit logs\r\n * @param {string} severity - Filter by severity ('all', 'info', 'warning', 'critical')\r\n * @param {number} limit - Number of logs to return\r\n * @returns {Array} - Security logs\r\n */\nexport const getSecurityLogs = async (severity = 'all', limit = 100) => {\n  try {\n    const response = await fetchWithAuth(`/api/security/logs?severity=${severity}&limit=${limit}`);\n    const data = await response.json();\n    return data.logs || [];\n  } catch (error) {\n    console.error('Security logs error:', error);\n    // Return fallback data for security logs\n    return [{\n      id: 1,\n      timestamp: new Date(Date.now() - 60 * 60000).toISOString(),\n      event_type: 'login_success',\n      severity: 'info',\n      ip_address: '192.168.1.1',\n      details: {\n        username: 'admin'\n      }\n    }, {\n      id: 2,\n      timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n      event_type: 'login_failure',\n      severity: 'warning',\n      ip_address: '192.168.1.2',\n      details: {\n        username: 'unknown'\n      }\n    }, {\n      id: 3,\n      timestamp: new Date(Date.now() - 15 * 60000).toISOString(),\n      event_type: 'data_access',\n      severity: 'info',\n      ip_address: '192.168.1.1',\n      details: {\n        data_type: 'performance_metrics'\n      }\n    }];\n  }\n};\n\n/**\r\n * Update user settings\r\n * @param {Object} settings - Settings to update\r\n * @returns {Object} - Updated user data\r\n */\nexport const updateUserSettings = async settings => {\n  try {\n    const response = await fetchWithAuth('/api/users/settings', {\n      method: 'PUT',\n      body: JSON.stringify(settings)\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Settings update error:', error);\n    // Return success status for offline support\n    return {\n      status: 'success',\n      message: 'Settings updated (offline mode)'\n    };\n  }\n};\n\n/**\r\n * Get IoT device data for a specific device\r\n * @param {string} deviceId - The device ID\r\n * @returns {Promise<Object>} - Device data\r\n */\nexport const getIoTDeviceData = async deviceId => {\n  try {\n    const response = await fetchWithAuth(`/api/metrics/iot_data/${deviceId}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching IoT device data:', error);\n    // Return fallback data for testing\n    return {\n      data: [{\n        device_id: deviceId,\n        session_id: 'fallback-session',\n        timestamp: new Date().toISOString(),\n        metrics: {\n          clicks_per_second: 4,\n          movements_count: 120,\n          dpi: 16000,\n          polling_rate: 1000,\n          avg_click_distance: 42.5,\n          button_count: 8\n        },\n        status: {\n          under_attack: false,\n          attack_duration: 0,\n          battery_level: 85,\n          connection_quality: 95\n        }\n      }]\n    };\n  }\n};\n\n/**\r\n * Get security alerts for a specific device\r\n * @param {string} deviceId - The device ID\r\n * @returns {Promise<Object>} - Security alerts\r\n */\nexport const getDeviceSecurityAlerts = async deviceId => {\n  try {\n    const response = await fetchWithAuth(`/api/security/device_alerts/${deviceId}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching security alerts:', error);\n    return {\n      alerts: []\n    };\n  }\n};\n\n/**\r\n * Send a command to an IoT device\r\n * @param {string} deviceId - The device ID\r\n * @param {string} command - The command to send\r\n * @param {Object} params - Command parameters\r\n * @returns {Promise<Object>} - Command result\r\n */\nexport const sendDeviceCommand = async (deviceId, command, params = {}) => {\n  try {\n    const response = await fetchWithAuth(`/api/device/${deviceId}/command`, {\n      method: 'POST',\n      body: JSON.stringify({\n        command,\n        ...params\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('Error sending device command:', error);\n    return {\n      status: 'error',\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","refreshToken","currentToken","localStorage","getItem","response","fetch","method","headers","ok","data","json","setItem","token","console","log","warn","status","error","fetchWithAuth","endpoint","options","retryCount","Error","refreshed","removeItem","window","location","href","errorMessage","errorData","e","login","username","password","body","JSON","stringify","verifyToken","logout","registerDevice","deviceName","deviceType","name","device_type","getDevices","devices","updateDeviceStatus","deviceId","getPerformanceData","timeRange","timestamp","Date","now","toISOString","actions_per_minute","key_press_count","mouse_click_count","getRecentSessions","limit","filter","sessions","id","start_time","duration_minutes","average_apm","device_name","getSecurityLogs","severity","logs","event_type","ip_address","details","data_type","updateUserSettings","settings","message","getIoTDeviceData","device_id","session_id","metrics","clicks_per_second","movements_count","dpi","polling_rate","avg_click_distance","button_count","under_attack","attack_duration","battery_level","connection_quality","getDeviceSecurityAlerts","alerts","sendDeviceCommand","command","params"],"sources":["C:/Users/malus/secure-esports-tracker/dashboard/src/utils/api.js"],"sourcesContent":["/**\r\n * API Utilities for Secure Esports Equipment Performance Tracker\r\n * Provides functions for authenticated API requests and error handling\r\n */\r\n\r\n// Base URL for API requests\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n/**\r\n * Refresh the authentication token\r\n * @returns {Promise<boolean>} Success status\r\n */\r\nexport const refreshToken = async () => {\r\n  try {\r\n    const currentToken = localStorage.getItem('authToken');\r\n    if (!currentToken) {\r\n      return false;\r\n    }\r\n\r\n    // Use the current token to request a new one\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${currentToken}`\r\n      }\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      localStorage.setItem('authToken', data.token);\r\n      console.log('Token refreshed successfully');\r\n      return true;\r\n    }\r\n    \r\n    console.warn('Token refresh failed, status:', response.status);\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Token refresh failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Make an authenticated fetch request to the API\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise} - Fetch promise\r\n */\r\nexport const fetchWithAuth = async (endpoint, options = {}, retryCount = 0) => {\r\n  // Get auth token from localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (!token) {\r\n    throw new Error('Authentication required');\r\n  }\r\n  \r\n  // Set up headers with authentication\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${token}`,\r\n    ...options.headers\r\n  };\r\n  \r\n  // Make request with authentication\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      ...options,\r\n      headers\r\n    });\r\n    \r\n    // Handle token expiration\r\n    if (response.status === 401) {\r\n      console.log('Token expired, attempting to refresh...');\r\n      \r\n      // Only try to refresh once to prevent infinite loops\r\n      if (retryCount === 0) {\r\n        const refreshed = await refreshToken();\r\n        if (refreshed) {\r\n          console.log('Token refreshed, retrying request');\r\n          // Retry the request with the new token\r\n          return fetchWithAuth(endpoint, options, retryCount + 1);\r\n        }\r\n      }\r\n      \r\n      // Clear invalid token and redirect to login\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login?session=expired';\r\n      throw new Error('Authentication token expired');\r\n    }\r\n    \r\n    // Handle other error status codes\r\n    if (!response.ok) {\r\n      let errorMessage;\r\n      try {\r\n        const errorData = await response.json();\r\n        errorMessage = errorData.error || `Request failed with status ${response.status}`;\r\n      } catch (e) {\r\n        errorMessage = `Request failed with status ${response.status}`;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Login user and get authentication token\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Object} - User data and token\r\n */\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        throw new Error('Invalid username or password');\r\n      }\r\n      throw new Error('Login failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verify the current authentication token\r\n * @returns {Object} - User data if token is valid\r\n */\r\nexport const verifyToken = async () => {\r\n  try {\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) {\r\n      throw new Error('No authentication token');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      localStorage.removeItem('authToken');\r\n      throw new Error('Invalid token');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Token verification error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Logout user and clear authentication\r\n */\r\nexport const logout = () => {\r\n  localStorage.removeItem('authToken');\r\n  window.location.href = '/login';\r\n};\r\n\r\n/**\r\n * Register a new device\r\n * @param {string} deviceName - Name of the device\r\n * @param {string} deviceType - Type of device (keyboard, mouse, system)\r\n * @returns {Object} - Device data including client_id and client_secret\r\n */\r\nexport const registerDevice = async (deviceName, deviceType) => {\r\n  try {\r\n    const response = await fetchWithAuth('/api/devices/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ \r\n        name: deviceName,\r\n        device_type: deviceType\r\n      })\r\n    });\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Device registration error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get all registered devices\r\n * @returns {Array} - List of devices\r\n */\r\nexport const getDevices = async () => {\r\n  try {\r\n    const response = await fetchWithAuth('/api/devices');\r\n    const data = await response.json();\r\n    return data.devices || [];\r\n  } catch (error) {\r\n    console.error('Error fetching devices:', error);\r\n    // Return empty array as fallback\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Update device status\r\n * @param {string} deviceId - Device ID\r\n * @param {string} status - New status ('active' or 'disabled')\r\n * @returns {Object} - Updated device data\r\n */\r\nexport const updateDeviceStatus = async (deviceId, status) => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/devices/${deviceId}/status`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({ status })\r\n    });\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating device status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get performance data for a specific time range\r\n * @param {string} timeRange - 'day', 'week', 'month'\r\n * @returns {Array} - Performance data\r\n */\r\nexport const getPerformanceData = async (timeRange = 'day') => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/analytics/performance?timeRange=${timeRange}`);\r\n    const data = await response.json();\r\n    return data.data || [];\r\n  } catch (error) {\r\n    console.error('Performance data error:', error);\r\n    // Return fallback data\r\n    return [\r\n      {\r\n        timestamp: new Date(Date.now() - 50 * 60000).toISOString(),\r\n        actions_per_minute: 120,\r\n        key_press_count: 100,\r\n        mouse_click_count: 50\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 40 * 60000).toISOString(),\r\n        actions_per_minute: 135,\r\n        key_press_count: 110,\r\n        mouse_click_count: 60\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n        actions_per_minute: 142,\r\n        key_press_count: 115,\r\n        mouse_click_count: 65\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 20 * 60000).toISOString(),\r\n        actions_per_minute: 128,\r\n        key_press_count: 105,\r\n        mouse_click_count: 55\r\n      },\r\n      {\r\n        timestamp: new Date(Date.now() - 10 * 60000).toISOString(),\r\n        actions_per_minute: 138,\r\n        key_press_count: 112,\r\n        mouse_click_count: 58\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\n/**\r\n * Get recent sessions with optional filtering\r\n * @param {number} limit - Number of sessions to return\r\n * @param {string} filter - Filter by timeframe ('all', 'week', 'month')\r\n * @returns {Array} - Recent sessions\r\n */\r\nexport const getRecentSessions = async (limit = 5, filter = 'all') => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/sessions/recent?limit=${limit}&filter=${filter}`);\r\n    const data = await response.json();\r\n    return data.sessions || [];\r\n  } catch (error) {\r\n    console.error('Recent sessions error:', error);\r\n    // Return fallback data\r\n    return [\r\n      {\r\n        id: '1',\r\n        start_time: new Date(Date.now() - 24 * 60 * 60000).toISOString(),\r\n        duration_minutes: 120,\r\n        average_apm: 130,\r\n        device_name: 'Gaming PC'\r\n      },\r\n      {\r\n        id: '2',\r\n        start_time: new Date(Date.now() - 12 * 60 * 60000).toISOString(),\r\n        duration_minutes: 90,\r\n        average_apm: 145,\r\n        device_name: 'Gaming PC'\r\n      },\r\n      {\r\n        id: '3',\r\n        start_time: new Date(Date.now() - 4 * 60 * 60000).toISOString(),\r\n        duration_minutes: 60,\r\n        average_apm: 138,\r\n        device_name: 'Gaming PC'\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\n/**\r\n * Get security audit logs\r\n * @param {string} severity - Filter by severity ('all', 'info', 'warning', 'critical')\r\n * @param {number} limit - Number of logs to return\r\n * @returns {Array} - Security logs\r\n */\r\nexport const getSecurityLogs = async (severity = 'all', limit = 100) => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/security/logs?severity=${severity}&limit=${limit}`);\r\n    const data = await response.json();\r\n    return data.logs || [];\r\n  } catch (error) {\r\n    console.error('Security logs error:', error);\r\n    // Return fallback data for security logs\r\n    return [\r\n      {\r\n        id: 1,\r\n        timestamp: new Date(Date.now() - 60 * 60000).toISOString(),\r\n        event_type: 'login_success',\r\n        severity: 'info',\r\n        ip_address: '192.168.1.1',\r\n        details: { username: 'admin' }\r\n      },\r\n      {\r\n        id: 2,\r\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n        event_type: 'login_failure',\r\n        severity: 'warning',\r\n        ip_address: '192.168.1.2',\r\n        details: { username: 'unknown' }\r\n      },\r\n      {\r\n        id: 3,\r\n        timestamp: new Date(Date.now() - 15 * 60000).toISOString(),\r\n        event_type: 'data_access',\r\n        severity: 'info',\r\n        ip_address: '192.168.1.1',\r\n        details: { data_type: 'performance_metrics' }\r\n      }\r\n    ];\r\n  }\r\n};\r\n\r\n/**\r\n * Update user settings\r\n * @param {Object} settings - Settings to update\r\n * @returns {Object} - Updated user data\r\n */\r\nexport const updateUserSettings = async (settings) => {\r\n  try {\r\n    const response = await fetchWithAuth('/api/users/settings', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(settings)\r\n    });\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Settings update error:', error);\r\n    // Return success status for offline support\r\n    return { status: 'success', message: 'Settings updated (offline mode)' };\r\n  }\r\n};\r\n\r\n/**\r\n * Get IoT device data for a specific device\r\n * @param {string} deviceId - The device ID\r\n * @returns {Promise<Object>} - Device data\r\n */\r\nexport const getIoTDeviceData = async (deviceId) => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/metrics/iot_data/${deviceId}`);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching IoT device data:', error);\r\n    // Return fallback data for testing\r\n    return { \r\n      data: [{\r\n        device_id: deviceId,\r\n        session_id: 'fallback-session',\r\n        timestamp: new Date().toISOString(),\r\n        metrics: {\r\n          clicks_per_second: 4,\r\n          movements_count: 120,\r\n          dpi: 16000,\r\n          polling_rate: 1000,\r\n          avg_click_distance: 42.5,\r\n          button_count: 8\r\n        },\r\n        status: {\r\n          under_attack: false,\r\n          attack_duration: 0,\r\n          battery_level: 85,\r\n          connection_quality: 95\r\n        }\r\n      }]\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get security alerts for a specific device\r\n * @param {string} deviceId - The device ID\r\n * @returns {Promise<Object>} - Security alerts\r\n */\r\nexport const getDeviceSecurityAlerts = async (deviceId) => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/security/device_alerts/${deviceId}`);\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching security alerts:', error);\r\n    return { alerts: [] };\r\n  }\r\n};\r\n\r\n/**\r\n * Send a command to an IoT device\r\n * @param {string} deviceId - The device ID\r\n * @param {string} command - The command to send\r\n * @param {Object} params - Command parameters\r\n * @returns {Promise<Object>} - Command result\r\n */\r\nexport const sendDeviceCommand = async (deviceId, command, params = {}) => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/device/${deviceId}/command`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        command,\r\n        ...params\r\n      })\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error sending device command:', error);\r\n    return { status: 'error', message: error.message };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}