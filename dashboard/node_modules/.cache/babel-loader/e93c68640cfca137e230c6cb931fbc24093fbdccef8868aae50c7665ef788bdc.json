{"ast":null,"code":"/**\r\n * API Utilities for Secure Esports Equipment Performance Tracker\r\n * Provides functions for authenticated API requests and error handling\r\n */\n\n// Base URL for API requests\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n/**\r\n * Make an authenticated fetch request to the API\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise} - Fetch promise\r\n */\nexport const fetchWithAuth = async (endpoint, options = {}) => {\n  // Get auth token from localStorage\n  const token = localStorage.getItem('authToken');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  // Set up headers with authentication\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`,\n    ...options.headers\n  };\n\n  // Make request with authentication\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers\n    });\n\n    // Handle token expiration\n    if (response.status === 401) {\n      // Clear invalid token\n      localStorage.removeItem('authToken');\n\n      // Redirect to login page\n      window.location.href = '/login?session=expired';\n      throw new Error('Authentication token expired');\n    }\n    return response;\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Login user and get authentication token\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Object} - User data and token\r\n */\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      if (response.status === 401) {\n        throw new Error('Invalid username or password');\n      }\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Verify the current authentication token\r\n * @returns {Object} - User data if token is valid\r\n */\nexport const verifyToken = async () => {\n  try {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      throw new Error('No authentication token');\n    }\n    const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      localStorage.removeItem('authToken');\n      throw new Error('Invalid token');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Token verification error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Register a new device\r\n * @param {string} deviceName - Name of the device\r\n * @param {string} deviceType - Type of device (keyboard, mouse, system)\r\n * @returns {Object} - Device data including client_id and client_secret\r\n */\nexport const registerDevice = async (deviceName, deviceType) => {\n  try {\n    const response = await fetchWithAuth('/api/devices/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        name: deviceName,\n        device_type: deviceType\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to register device');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Device registration error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get performance data for a specific time range\r\n * @param {string} timeRange - 'day', 'week', 'month'\r\n * @returns {Array} - Performance data\r\n */\nexport const getPerformanceData = async (timeRange = 'day') => {\n  try {\n    const response = await fetchWithAuth(`/api/analytics/performance?timeRange=${timeRange}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch performance data');\n    }\n    const data = await response.json();\n    return data.data;\n  } catch (error) {\n    console.error('Performance data error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get recent sessions with optional limit\r\n * @param {number} limit - Number of sessions to return\r\n * @param {string} filter - Filter by timeframe ('all', 'week', 'month')\r\n * @returns {Array} - Recent sessions\r\n */\nexport const getRecentSessions = async (limit = 5, filter = 'all') => {\n  try {\n    const response = await fetchWithAuth(`/api/sessions/recent?limit=${limit}&filter=${filter}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch recent sessions');\n    }\n    const data = await response.json();\n    return data.sessions;\n  } catch (error) {\n    console.error('Recent sessions error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get security audit logs\r\n * @param {Object} filters - Optional filters for logs (severity, event_type, etc.)\r\n * @param {number} limit - Number of logs to return\r\n * @returns {Array} - Security logs\r\n */\nexport const getSecurityLogs = async (filters = {}, limit = 100) => {\n  try {\n    // Build query string from filters\n    const queryParams = new URLSearchParams({\n      limit: limit.toString(),\n      ...filters\n    }).toString();\n    const response = await fetchWithAuth(`/api/security/logs?${queryParams}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch security logs');\n    }\n    const data = await response.json();\n    return data.logs;\n  } catch (error) {\n    console.error('Security logs error:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Update user settings\r\n * @param {Object} settings - Settings to update\r\n * @returns {Object} - Updated user data\r\n */\nexport const updateUserSettings = async settings => {\n  try {\n    const response = await fetchWithAuth('/api/users/settings', {\n      method: 'PUT',\n      body: JSON.stringify(settings)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update settings');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Settings update error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","fetchWithAuth","endpoint","options","token","localStorage","getItem","Error","headers","response","fetch","status","removeItem","window","location","href","error","console","login","username","password","method","body","JSON","stringify","ok","data","json","verifyToken","registerDevice","deviceName","deviceType","name","device_type","getPerformanceData","timeRange","getRecentSessions","limit","filter","sessions","getSecurityLogs","filters","queryParams","URLSearchParams","toString","logs","updateUserSettings","settings"],"sources":["C:/Users/malus/secure-esports-tracker/dashboard/src/utils/api.js"],"sourcesContent":["/**\r\n * API Utilities for Secure Esports Equipment Performance Tracker\r\n * Provides functions for authenticated API requests and error handling\r\n */\r\n\r\n// Base URL for API requests\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n/**\r\n * Make an authenticated fetch request to the API\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {Object} options - Fetch options\r\n * @returns {Promise} - Fetch promise\r\n */\r\nexport const fetchWithAuth = async (endpoint, options = {}) => {\r\n  // Get auth token from localStorage\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  if (!token) {\r\n    throw new Error('Authentication required');\r\n  }\r\n  \r\n  // Set up headers with authentication\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${token}`,\r\n    ...options.headers\r\n  };\r\n  \r\n  // Make request with authentication\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      ...options,\r\n      headers\r\n    });\r\n    \r\n    // Handle token expiration\r\n    if (response.status === 401) {\r\n      // Clear invalid token\r\n      localStorage.removeItem('authToken');\r\n      \r\n      // Redirect to login page\r\n      window.location.href = '/login?session=expired';\r\n      throw new Error('Authentication token expired');\r\n    }\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Login user and get authentication token\r\n * @param {string} username - User's username\r\n * @param {string} password - User's password\r\n * @returns {Object} - User data and token\r\n */\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username, password })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        throw new Error('Invalid username or password');\r\n      }\r\n      throw new Error('Login failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Verify the current authentication token\r\n * @returns {Object} - User data if token is valid\r\n */\r\nexport const verifyToken = async () => {\r\n  try {\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token) {\r\n      throw new Error('No authentication token');\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      localStorage.removeItem('authToken');\r\n      throw new Error('Invalid token');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Token verification error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Register a new device\r\n * @param {string} deviceName - Name of the device\r\n * @param {string} deviceType - Type of device (keyboard, mouse, system)\r\n * @returns {Object} - Device data including client_id and client_secret\r\n */\r\nexport const registerDevice = async (deviceName, deviceType) => {\r\n  try {\r\n    const response = await fetchWithAuth('/api/devices/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ \r\n        name: deviceName,\r\n        device_type: deviceType\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to register device');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Device registration error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get performance data for a specific time range\r\n * @param {string} timeRange - 'day', 'week', 'month'\r\n * @returns {Array} - Performance data\r\n */\r\nexport const getPerformanceData = async (timeRange = 'day') => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/analytics/performance?timeRange=${timeRange}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch performance data');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.data;\r\n  } catch (error) {\r\n    console.error('Performance data error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get recent sessions with optional limit\r\n * @param {number} limit - Number of sessions to return\r\n * @param {string} filter - Filter by timeframe ('all', 'week', 'month')\r\n * @returns {Array} - Recent sessions\r\n */\r\nexport const getRecentSessions = async (limit = 5, filter = 'all') => {\r\n  try {\r\n    const response = await fetchWithAuth(`/api/sessions/recent?limit=${limit}&filter=${filter}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch recent sessions');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.sessions;\r\n  } catch (error) {\r\n    console.error('Recent sessions error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get security audit logs\r\n * @param {Object} filters - Optional filters for logs (severity, event_type, etc.)\r\n * @param {number} limit - Number of logs to return\r\n * @returns {Array} - Security logs\r\n */\r\nexport const getSecurityLogs = async (filters = {}, limit = 100) => {\r\n  try {\r\n    // Build query string from filters\r\n    const queryParams = new URLSearchParams({\r\n      limit: limit.toString(),\r\n      ...filters\r\n    }).toString();\r\n    \r\n    const response = await fetchWithAuth(`/api/security/logs?${queryParams}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch security logs');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data.logs;\r\n  } catch (error) {\r\n    console.error('Security logs error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Update user settings\r\n * @param {Object} settings - Settings to update\r\n * @returns {Object} - Updated user data\r\n */\r\nexport const updateUserSettings = async (settings) => {\r\n  try {\r\n    const response = await fetchWithAuth('/api/users/settings', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(settings)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to update settings');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Settings update error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}